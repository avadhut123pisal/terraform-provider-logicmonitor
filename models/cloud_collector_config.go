// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudCollectorConfig cloud collector config
//
// swagger:model CloudCollectorConfig
type CloudCollectorConfig struct {

	// AppliesTo expression to match or filter device
	// Required: true
	AppliesTo *string `json:"appliesTo"`

	// Auto balanced collector group id assigned to ec2 or azure vm
	AutoBalancedCollectorGroupID int32 `json:"autoBalancedCollectorGroupId,omitempty"`

	// Normal collector ID assigned to ec2 or azure vm
	// Required: true
	CollectorID *int32 `json:"collectorId"`

	// Collector match priority, smaller value has higher priority
	// Required: true
	Priority *int32 `json:"priority"`

	// Use cloud device public ip or not
	UsePublicIP bool `json:"usePublicIP,omitempty"`
}

// Validate validates this cloud collector config
func (m *CloudCollectorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliesTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudCollectorConfig) validateAppliesTo(formats strfmt.Registry) error {

	if err := validate.Required("appliesTo", "body", m.AppliesTo); err != nil {
		return err
	}

	return nil
}

func (m *CloudCollectorConfig) validateCollectorID(formats strfmt.Registry) error {

	if err := validate.Required("collectorId", "body", m.CollectorID); err != nil {
		return err
	}

	return nil
}

func (m *CloudCollectorConfig) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cloud collector config based on context it is used
func (m *CloudCollectorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CloudCollectorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudCollectorConfig) UnmarshalBinary(b []byte) error {
	var res CloudCollectorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
