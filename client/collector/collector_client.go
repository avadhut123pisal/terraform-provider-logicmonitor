// Code generated by go-swagger; DO NOT EDIT.

package collector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new collector API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for collector API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddCollector adds collector
*/
func (a *Client) AddCollector(params *AddCollectorParams) (*AddCollectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCollectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCollector",
		Method:             "POST",
		PathPattern:        "/setting/collector/collectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCollectorReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddCollectorOK), nil

}

/*
DeleteCollectorByID deletes collector
*/
func (a *Client) DeleteCollectorByID(params *DeleteCollectorByIDParams) (*DeleteCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCollectorById",
		Method:             "DELETE",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCollectorByIDOK), nil

}

/*
GetCollectorByID gets collector
*/
func (a *Client) GetCollectorByID(params *GetCollectorByIDParams) (*GetCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorById",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorByIDOK), nil

}

/*
GetCollectorList gets collector list
*/
func (a *Client) GetCollectorList(params *GetCollectorListParams) (*GetCollectorListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorList",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorListOK), nil

}

/*
MiscGetCollectorDownloadToken gets collector download tokens

Get collector download token
*/
func (a *Client) MiscGetCollectorDownloadToken(params *MiscGetCollectorDownloadTokenParams) (*MiscGetCollectorDownloadTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMiscGetCollectorDownloadTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "miscGetCollectorDownloadToken",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/{id}/downloadToken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MiscGetCollectorDownloadTokenReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MiscGetCollectorDownloadTokenOK), nil

}

/*
UpdateCollectorByID updates collector
*/
func (a *Client) UpdateCollectorByID(params *UpdateCollectorByIDParams) (*UpdateCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCollectorById",
		Method:             "PUT",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCollectorByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
