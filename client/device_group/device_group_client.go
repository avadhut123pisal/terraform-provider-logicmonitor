// Code generated by go-swagger; DO NOT EDIT.

package device_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new device group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for device group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddDeviceGroup adds device group
*/
func (a *Client) AddDeviceGroup(params *AddDeviceGroupParams) (*AddDeviceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceGroup",
		Method:             "POST",
		PathPattern:        "/device/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceGroupOK), nil

}

/*
DeleteDeviceGroupByID deletes device group
*/
func (a *Client) DeleteDeviceGroupByID(params *DeleteDeviceGroupByIDParams) (*DeleteDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceGroupById",
		Method:             "DELETE",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceGroupByIDOK), nil

}

/*
GetDeviceGroupByID gets device group
*/
func (a *Client) GetDeviceGroupByID(params *GetDeviceGroupByIDParams) (*GetDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupById",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupByIDOK), nil

}

/*
GetDeviceGroupList gets device group list
*/
func (a *Client) GetDeviceGroupList(params *GetDeviceGroupListParams) (*GetDeviceGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupList",
		Method:             "GET",
		PathPattern:        "/device/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupListOK), nil

}

/*
UpdateDeviceGroupByID updates device group
*/
func (a *Client) UpdateDeviceGroupByID(params *UpdateDeviceGroupByIDParams) (*UpdateDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceGroupById",
		Method:             "PUT",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceGroupByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
